<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors"
         xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
         xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"
         xmlns:fbf="java:org.orbeon.oxf.fb.FormBuilderXPathApi"
         xmlns:ClientNames="java:org.orbeon.oxf.fr.ClientNames"

         xmlns:array="http://www.w3.org/2005/xpath-functions/array"
         xmlns:map="http://www.w3.org/2005/xpath-functions/map"

         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:xforms="http://www.w3.org/2002/xforms"
         xmlns:xxforms="http://orbeon.org/oxf/xml/xforms">

    <!-- NOTE on namespaces: in editable mode, we might be passed a path with @edit-ref that makes assumptions on NS prefixes,
         such as xh:, xf:, etc. so make sure the basic ones are defined for now. Would be worth improving on this. -->

    <xbl:binding
        id="fr-grid-single-binding"
        element="fr|grid-single, fr|grid[ref], fr|grid[nodeset], fr|grid[bind]"
        class="xbl-fr-grid"
        xxbl:mode="binding">

        <xbl:resources>
            <xbl:style src="/xbl/orbeon/grid/grid.css"/>
        </xbl:resources>

        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy-modes.xsl"/>
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>
                <xsl:import href="../grid-common/grid-common.xsl"/>

                <xsl:variable name="readonly"                 select="$root/@readonly = 'true'"/>
                <xsl:variable name="has-rowspan-or-colspan"   select="exists($root//(@rowspan | @colspan | @h | @w)[. > 1])"/>

                <!-- TODO LATER: refine, repeats? -->
                <xsl:variable name="is-table"                 select="not($use-css-grids-output) and ($has-rowspan-or-colspan or exists($root/(xf:group | xf:repeat)))"/>

                <xsl:variable name="table-elem"               select="if ($is-table) then 'xh:table' else 'xh:div'"/>
                <xsl:variable name="thead-elem"               select="if ($is-table) then 'xh:thead' else 'xh:div'"/>
                <xsl:variable name="tbody-elem"               select="if ($is-table) then 'xh:tbody' else 'xh:div'"/>
                <xsl:variable name="tr-elem"                  select="if ($is-table) then 'xh:tr'    else 'xh:div'"/>
                <xsl:variable name="th-elem"                  select="if ($is-table) then 'xh:th'    else 'xh:div'"/>
                <xsl:variable name="td-elem"                  select="if ($is-table) then 'xh:td'    else 'xh:div'"/>

                <xsl:template match="/*">

                    <xf:group appearance="xxf:internal">

                        <xsl:if test="$is-editable">
                            <!-- Point to the design-time source -->
                            <xf:var name="grid" value="{$edit-ref}"/>
                        </xsl:if>

                        <xf:var name="binding" value="xxf:binding('fr-grid-single-binding')"/>
                        <xf:var name="binding-outer" xxbl:scope="outer">
                            <xxf:value value="$binding" xxbl:scope="inner"/>
                        </xf:var>

                        <!-- Grid containing element -->
                        <xsl:element name="{$table-elem}">

                            <xsl:variable
                                name="classes-for-runtime"
                                select="
                                    'fr-grid',
                                    concat('fr-grid-', $static-col-count),
                                    'fr-grid-css'[$use-css-grids-output],
                                    (: Control name might not be available (unclear why normalize-space() is needed) :)
                                    for $name in frf:controlNameFromId(@id)[normalize-space()] return concat('fr-grid-', $name),
                                    'fr-grid-readonly'[$readonly],
                                    'fr-norepeat'
                            "/>

                            <!-- We don't have `fbf:gridCanDoClasses` when running Form Runner tests. -->
                            <xsl:attribute
                                use-when="function-available('fbf:gridCanDoClasses')"
                                name="class"
                                select="$classes-for-runtime, if ($is-editable) then fbf:gridCanDoClasses(@id) else ()"/>

                            <xsl:attribute
                                use-when="not(function-available('fbf:gridCanDoClasses'))"
                                name="class"
                                select="$classes-for-runtime"/>

                            <!-- This can possibly help accessibility -->
                            <xsl:if test="$is-table">
                                <xsl:attribute name="role" select="'presentation'"/>
                            </xsl:if>

                            <xsl:variable name="rows-content">
                                <xsl:for-each select="1 to array:size($rows-array)">

                                    <xsl:variable name="static-row-pos" select="."/>
                                    <xsl:variable name="cells"          select="array:get($rows-array, $static-row-pos)"/>

                                    <xsl:variable name="cells-content">
                                        <xsl:for-each select="$cells">
                                            <xsl:variable name="map" select="."/>

                                            <xsl:variable name="c" select="map:get($map, 'c')"/>
                                            <xsl:variable name="x" select="map:get($map, 'x')"/>
                                            <xsl:variable name="y" select="map:get($map, 'y')"/>
                                            <xsl:variable name="h" select="map:get($map, 'h')"/>
                                            <xsl:variable name="w" select="map:get($map, 'w')"/>

                                            <xsl:variable name="controls"    select="$c/*" as="element()*"/>
                                            <xsl:variable name="has-control" select="exists($controls)"/>
                                            <xsl:variable name="control"     select="$controls[1]" as="element()?"/>

                                             <xsl:if test="$is-editable">
                                                <!-- Point to the contained control -->
                                                <!-- Used below by `fbf:hasEditor()` only -->
                                                <xf:var
                                                    name="control"
                                                    value="id('{$control/@id}', $grid)"
                                                    as="element()?"/>
                                            </xsl:if>
                                            <!-- Scope AVT vars -->
                                            <xsl:if test="$is-editable">
                                                <xsl:copy-of select="fr:scope-outer-avt-class($c/@class)"/>
                                            </xsl:if>

                                            <xsl:element name="{$td-elem}">

                                                <!-- Attributes -->
                                                <xsl:attribute name="xxf:control">true</xsl:attribute><!-- for cell selection -->
                                                <xsl:copy-of select="fr:th-td-classes-attr('td', $c/@class, $c/@id)"/>

                                                <xsl:if test="$h > 1"><xsl:attribute name="{fr:rowspan-attribute()}" select="$h"/></xsl:if>
                                                <xsl:if test="$w > 1"><xsl:attribute name="{fr:colspan-attribute()}" select="$w"/></xsl:if>

                                                <xsl:if test="$use-css-grids-output">
                                                    <xsl:attribute name="{$att-x}" select="$x"/>
                                                    <xsl:attribute name="{$att-y}" select="$y"/>
                                                </xsl:if>

                                                <xsl:apply-templates select="$c/(@* except (@class, @xxf:control, @x, @y, @h, @w))"/>

                                                <xsl:if test="$is-editable">
                                                    <xsl:attribute name="xxf:control">true</xsl:attribute>
                                                </xsl:if>

                                                <!-- Content -->
                                                <xf:group xxbl:scope="outer" appearance="xxf:internal">
                                                    <xsl:for-each select="if (not($is-editable)) then $controls else $control">
                                                        <xsl:copy>
                                                            <xsl:attribute
                                                                name="class"
                                                                select="
                                                                    @class,
                                                                    concat('fr-grid-', $y, '-', $x),
                                                                    if ($is-editable) then fr:fb-control-classes(., true()) else ()
                                                            "/>
                                                            <xsl:copy-of
                                                                select="(@* except @class) | node()"/>
                                                        </xsl:copy>
                                                    </xsl:for-each>
                                                </xf:group>
                                            </xsl:element>
                                        </xsl:for-each>
                                    </xsl:variable><!-- $cells-content -->

                                    <xsl:choose>
                                        <xsl:when test="not($use-css-grids-output)">
                                            <xsl:element name="{$tr-elem}">
                                                <!--  Maybe: restore `@class` coming from `*:tr` if there is one. But since anyway
                                                      the new grid format doesn't have explicit rows, this would be only for
                                                      backward compatibility. -->
                                                <xsl:attribute name="class" select="'fr-grid-tr'"/>
                                                <xsl:copy-of select="$cells-content"/>
                                            </xsl:element>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <!-- CSS grids output -->
                                            <xsl:copy-of select="$cells-content"/>
                                        </xsl:otherwise>
                                    </xsl:choose>

                                </xsl:for-each>
                            </xsl:variable><!-- $rows-content -->

                            <xsl:variable name="maybe-repeated-content">

                                <!-- Place all grid `<xf:var>`s here for now -->
                                <!-- See discussion in https://github.com/orbeon/orbeon-forms/issues/2738  -->
                                <xsl:apply-templates
                                    select="
                                        ($root/*:body | $root/self::*)/
                                        (*:tr | self::*)/
                                        xf:var
                                "/>

                                <xsl:choose>
                                    <xsl:when test="not($use-css-grids-output)">
                                        <xsl:element name="{$tbody-elem}">
                                            <xsl:attribute name="class">fr-grid-body</xsl:attribute>
                                            <xsl:copy-of select="$rows-content"/>
                                        </xsl:element>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <!-- CSS grids output -->
                                        <xsl:element name="xh:div">
                                            <xsl:attribute name="class">fr-grid-body</xsl:attribute>
                                            <xsl:copy-of select="$rows-content"/>
                                        </xsl:element>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>

                            <xf:group appearance="xxf:internal" ref="$binding-outer" xxbl:scope="outer">
                                <xf:group appearance="xxf:internal" xxbl:scope="inner">
                                    <xsl:copy-of select="$maybe-repeated-content"/>
                                </xf:group>
                            </xf:group>
                        </xsl:element><!-- $table-elem -->

                        <xsl:variable
                            name="grid-has-relevant-control-xpath"
                            select="
                                string-join(
                                    (
                                        for $id
                                            in fr:c/(* except fr:hidden)/@id/string()
                                            return concat('xxf:relevant(xxf:binding(''', $id, '''))'),
                                        'false()'
                                    ),
                                    ' or '
                                )
                            "/>

                        <xh:div class="{{'fr-grid-non-empty'[{$grid-has-relevant-control-xpath}]}}" xxbl:scope="outer"/>
                    </xf:group>
                </xsl:template>

            </xsl:transform>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>
