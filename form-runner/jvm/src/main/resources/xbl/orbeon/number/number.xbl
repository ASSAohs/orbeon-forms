<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:NumberSupport="java:org.orbeon.xbl.NumberSupportJava">

    <xbl:binding
            id="fr-number"
            element="
                fr|number,
                xf|input:xxf-type('xs:decimal'),
                xf|input:xxf-type('xs:integer')"
            xxbl:mode="lhha binding value focus javascript-lifecycle"
            xxf:external-events="fr-set-client-value"
            xxbl:label-for="html-input">

        <metadata xmlns="http://orbeon.org/oxf/xml/form-builder">
            <display-name lang="en">Number</display-name>
            <display-name lang="es">Número</display-name>
            <display-name lang="fi">Numero</display-name>
            <display-name lang="fr">Nombre</display-name>
            <display-name lang="ru" todo="true">[Number]</display-name>
            <display-name lang="de">Zahlenwert</display-name>
            <display-name lang="it">Valore numerico</display-name>
            <display-name lang="sv">Numeriskt värde</display-name>
            <display-name lang="nl">Getal</display-name>
            <display-name lang="pt">Número</display-name>
            <icon>
                <icon-class>fa fa-fw fa-superscript</icon-class>
            </icon>
            <templates>
                <bind type="xf:decimal"/>
                <view>
                    <fr:number xmlns:xf="http://www.w3.org/2002/xforms">
                        <xf:label ref=""/>
                        <xf:hint ref=""/>
                        <xf:help ref=""/>
                        <xf:alert ref=""/>
                    </fr:number>
                </view>
            </templates>
            <control-details>
                <xf:model xmlns="" id="fb-editor-number-model">

                    <xf:action event="xforms-model-construct-done" iterate="instance('local')/*">
                        <xf:var name="c" value="."/>
                        <xf:setvalue ref="$c" value="instance()/@*[name() = name($c)]"/>
                    </xf:action>

                    <xf:instance id="local" xxf:exclude-result-prefixes="#all">
                        <local>
                            <prefix/>
                            <suffix/>
                            <decimal-separator/>
                            <grouping-separator/>
                            <digits-after-decimal/>
                            <round-when-formatting/>
                            <round-when-storing/>
                            <field-width/>
                        </local>
                    </xf:instance>

                    <xf:bind ref="instance('local')">
                        <xf:bind ref="prefix | suffix | digits-after-decimal" xxf:whitespace="trim"/>
                        <xf:bind ref="digits-after-decimal" type="xf:integer" constraint="xxf:is-blank() or xxf:non-negative()"/>
                        <xf:bind ref="decimal-separator | grouping-separator" constraint="xxf:max-length(1)"/>
                    </xf:bind>

                    <xf:instance id="fr-form-resources" xxf:readonly="true">
                        <resources>
                            <resource xml:lang="en">
                                <prefix>Prefix</prefix>
                                <suffix>Suffix</suffix>
                                <decimal-separator>Decimal Separator</decimal-separator>
                                <grouping-separator>Grouping Separator</grouping-separator>
                                <digits-after-decimal>Digits after decimal</digits-after-decimal>
                                <round-when-formatting>Round when formatting</round-when-formatting>
                                <round-when-storing>Round when storing</round-when-storing>
                                <default-always-never>
                                    <item id="0">Use default</item>
                                    <item id="1">Always</item>
                                    <item id="2">Never</item>
                                </default-always-never>
                            </resource>
                            <resource xml:lang="fr">
                                <prefix>Préfixe</prefix>
                                <suffix>Suffixe</suffix>
                                <decimal-separator>Séparateur décimal</decimal-separator>
                                <grouping-separator>Séparateur de groupe</grouping-separator>
                                <digits-after-decimal>Chiffres après la virgule</digits-after-decimal>
                                <round-when-formatting>Arrondir au formattage</round-when-formatting>
                                <round-when-storing>Arrondir au stockage</round-when-storing>
                                <default-always-never>
                                    <item id="0">Utiliser la défaut</item>
                                    <item id="1">Toujours</item>
                                    <item id="2">Jamais</item>
                                </default-always-never>
                            </resource>
                        </resources>
                    </xf:instance>
                </xf:model>
                <fr:grid xmlns="" id="fb-editor-number-grid">
                    <xh:tr>
                        <xh:td colspan="2">
                            <xf:input ref="instance('local')/prefix" id="prefix-control">
                                <xf:label ref="xxf:r('prefix')"/>
                                <xf:alert/>
                            </xf:input>
                        </xh:td>
                        <xh:td colspan="2">
                            <xf:input ref="instance('local')/suffix" id="suffix-control">
                                <xf:label ref="xxf:r('suffix')"/>
                                <xf:alert/>
                            </xf:input>
                        </xh:td>
                    </xh:tr>
                    <xh:tr>
                        <xh:td colspan="2">
                            <fr:number ref="instance('local')/digits-after-decimal"  id="digits-after-decimal-control">
                                <xf:label ref="xxf:r('digits-after-decimal')"/>
                                <xf:alert/>
                            </fr:number>
                        </xh:td>
                        <xh:td colspan="2">
                            <xf:input ref="instance('local')/decimal-separator"  id="decimal-separator-control">
                                <xf:label ref="xxf:r('decimal-separator')"/>
                                <xf:alert/>
                            </xf:input>
                        </xh:td>
                        <xh:td colspan="2">
                            <xf:input ref="instance('local')/grouping-separator"  id="grouping-separator-control">
                                <xf:label ref="xxf:r('grouping-separator')"/>
                                <xf:alert/>
                            </xf:input>
                        </xh:td>
                    </xh:tr>
                    <xh:tr>
                        <xh:td colspan="6">
                            <xf:select1 ref="instance('local')/round-when-formatting" appearance="full xxf:horizontal" id="round-when-formatting-control">
                                <xf:label ref="xxf:r('round-when-formatting')"/>
                                <xf:alert/>
                                <xf:itemset ref="xxf:resource-elements('default-always-never.item')">
                                    <xf:label ref="."/>
                                    <xf:value ref="if (@id = 0) then '' else if (@id = 1) then 'true' else 'false'"/>
                                </xf:itemset>
                            </xf:select1>
                        </xh:td>
                    </xh:tr>
                    <xh:tr>
                        <xh:td colspan="6">
                            <xf:select1 ref="instance('local')/round-when-storing" appearance="full xxf:horizontal" id="round-when-storing-control">
                                <xf:label ref="xxf:r('round-when-storing')"/>
                                <xf:alert/>
                                <xf:itemset ref="xxf:resource-elements('default-always-never.item')">
                                    <xf:label ref="."/>
                                    <xf:value ref="if (@id = 0) then '' else if (@id = 1) then 'true' else 'false'"/>
                                </xf:itemset>
                            </xf:select1>
                        </xh:td>
                    </xh:tr>
                    <xh:tr>
                        <xh:td colspan="6">
                            <xf:select1 ref="instance('local')/field-width" appearance="full xxf:horizontal" id="field-width-control">
                                <xf:label ref="xxf:r('xbl-control-settings.field-width', '|fr-form-resources|')"/>
                                <xf:item>
                                    <xf:label ref="xxf:r('xbl-control-settings.default', '|fr-form-resources|')"/>
                                    <xf:value/>
                                </xf:item>
                                <xf:item>
                                    <xf:label ref="xxf:r('xbl-control-settings.full', '|fr-form-resources|')"/>
                                    <xf:value>full</xf:value>
                                </xf:item>
                                <xf:item>
                                    <xf:label ref="xxf:r('xbl-control-settings.natural', '|fr-form-resources|')"/>
                                    <xf:value>natural</xf:value>
                                </xf:item>
                            </xf:select1>
                        </xh:td>
                    </xh:tr>
                </fr:grid>
                <xf:action
                    id="fb-editor-number-action"
                    event="xforms-value-changed"
                    observer="
                        prefix-control
                        suffix-control
                        decimal-separator-control
                        grouping-separator-control
                        digits-after-decimal-control
                        round-when-formatting-control
                        round-when-storing-control
                        field-width-control">

                    <xf:var name="name"      value="name(event('xxf:binding'))"/>
                    <xf:var name="new-value" value="string(event('xxf:binding'))"/>
                    <xf:insert
                        context="instance()"
                        if="xxf:non-blank($new-value)"
                        origin="xf:attribute($name, $new-value)"/>
                    <xf:delete
                        if="xxf:is-blank($new-value)"
                        ref="instance()/@*[name() = $name]"/>
                </xf:action>
            </control-details>
        </metadata>

        <xbl:resources>
            <xbl:style src="/xbl/orbeon/number/number.css"/>
        </xbl:resources>

        <xbl:handlers>
            <xbl:handler event="fr-set-client-value">
                <xf:setvalue
                    ref="xxf:binding('fr-number')"
                    value="
                        NumberSupport:getStorageValueJava(
                            event('value'),
                            xxf:binding('fr-number'),
                            fr:component-param-value('decimal-separator'),
                            fr:component-param-value('grouping-separator'),
                            fr:component-param-value('prefix'),
                            fr:component-param-value('digits-after-decimal'),
                            string(fr:component-param-value('round-when-formatting')) = 'true',
                            string(fr:component-param-value('round-when-storing'))    = 'true'
                        )"/>
            </xbl:handler>

            <!-- Update field when formatted value changes or iteration moves. Do this here so client has valid observer id. -->
            <xbl:handler
                phase="target"
                event="xxforms-visible xforms-value-changed xxforms-iteration-moved DOMFocusOut">

                <xf:var
                    name="display-and-edit-values"
                    value="
                        NumberSupport:getDisplayAndEditValueJava(
                            xxf:binding('fr-number'),
                            fr:component-param-value('decimal-separator'),
                            fr:component-param-value('grouping-separator'),
                            fr:component-param-value('prefix'),
                            fr:component-param-value('digits-after-decimal'),
                            string(fr:component-param-value('round-when-formatting')) = 'true',
                            string(fr:component-param-value('round-when-storing'))    = 'true'
                        )"/>

                <xf:action type="javascript">
                    <xf:param name="displayValue"     value="$display-and-edit-values[1]"/>
                    <xf:param name="editValue"        value="$display-and-edit-values[2]"/>
                    <xf:param name="decimalSeparator" value="fr:component-param-value('decimal-separator')"/>
                    <xf:body>var i = ORBEON.xforms.XBL.instanceForControl(this); if (i) i.updateWithServerValues(displayValue, editValue, decimalSeparator);</xf:body>
                </xf:action>

            </xbl:handler>

        </xbl:handlers>

        <xbl:template>

            <xf:var
                name="binding"
                value="xxf:binding('fr-number')"/>

            <xf:var
                name="view"
                value="
                    xxf:is-control-readonly('fr-number') and (
                        property('xxf:readonly-appearance') = 'static' or
                        (: See https://github.com/orbeon/orbeon-forms/issues/3800 :)
                        fr:mode() = 'pdf'
                    )"/>

            <!--<xf:dispatch event="xxforms-iteration-moved" name="fr-iteration-moved" targetid="formatted-value"/>-->

            <!-- Readwrite mode -->
            <xf:group ref="$binding[not($view)]">


                <xf:var name="prefix"      value="fr:component-param-value('prefix')"/>
                <xf:var name="suffix"      value="fr:component-param-value('suffix')"/>
                <xf:var name="field-width" value="fr:component-param-value('field-width')"/>

                <!-- See also https://github.com/orbeon/orbeon-forms/issues/2495 -->

                <!--
                    Visible HTML input

                    - `.xforms-input-input`: so the border gets highlighted when the container gets `.xforms-invalid.xforms-visited`
                    - `step="any"`: so that even for numbers with decimal digits, increments/decrements are by 1
                    - `pattern`:
                        - triggers the numeric keypad on iOS when needed
                        - use `fraction-digits` common constraint instead of `$digits-after-decimal`, because what matters to select
                          the keypad is that the *expected* format be a non-negative integer, while `$digits-after-decimal` is used
                          for formatting only
                        - also tests on the `integer` datatype, which is the same as `fraction-digits = 0`
                    - `maxlength`:
                        - not natively supported for `type="number"`, but when JavaScript support is enabled, the attribute can be read to enforce
                          a maximum number of allowed characters to type (https://github.com/orbeon/orbeon-forms/issues/2486)
                        - if a `maxlength` or `xxf:maxlength` is placed on the bound element, that takes precedence
                    - `min`: makes control natively invalid as the user types, if the value cannot be negative
                -->
                <xh:span
                    class="{
                        (
                            'input-prepend'[xxf:non-blank($prefix)],
                            'input-append' [xxf:non-blank($suffix)],
                            concat('fr-field-width-', $field-width)
                        )
                    }">
                    <xf:group fr:keep-if-param-non-blank="prefix" class="add-on" ref=".[xxf:non-blank($prefix)]"><xf:output value="$prefix"/></xf:group>
                    <xh:input
                        id="html-input"
                        class="xbl-fr-number-visible-input xbl-html-input xforms-input-input"
                        type="text"
                        step="any"
                        pattern="{
                            if (NumberSupport:isZeroValidationFractionDigitsJava($binding) and
                                xxf:custom-mip($binding, 'non-negative') = 'true'
                            ) then
                                '[0-9]*'
                            else
                                '.*'
                        }"
                        min="{
                            if (xxf:custom-mip($binding, 'non-negative') = 'true') then
                                '0'
                            else
                                ''
                        }"
                        maxlength="{xs:integer(xxf:custom-mip($binding, 'max-length')[. castable as xs:integer])}"
                        xbl:attr="tabindex tabindex=navindex maxlength=xxf:maxlength maxlength pattern=xxf:pattern"/>
                    <xf:group fr:keep-if-param-non-blank="suffix" class="add-on" ref=".[xxf:non-blank($suffix)]"><xf:output value="$suffix"/></xf:group>
                </xh:span>
            </xf:group>
            <!-- Static readonly mode -->
            <xf:input
                ref="$binding[$view]"
                xxf:format="
                    string-join(
                        (
                            fr:component-param-value('prefix'),
                            NumberSupport:getDisplayAndEditValueJava(
                                xxf:binding('fr-number'),
                                fr:component-param-value('decimal-separator'),
                                fr:component-param-value('grouping-separator'),
                                fr:component-param-value('prefix'),
                                fr:component-param-value('digits-after-decimal'),
                                string(fr:component-param-value('round-when-formatting')) = 'true',
                                string(fr:component-param-value('round-when-storing'))    = 'true'
                            )[1],
                            fr:component-param-value('suffix')
                        ),
                        ' '
                    )"/>

        </xbl:template>
    </xbl:binding>
</xbl:xbl>
